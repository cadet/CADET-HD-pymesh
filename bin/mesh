#!/usr/bin/env python3

from pymesh import ConfigHandler, Logger, Model, __version__

import argparse
import gmsh
import subprocess


def pymesh():
    ap = argparse.ArgumentParser()
    ap.add_argument("file", help="Input file")
    args = vars(ap.parse_args())

    logger = Logger()

    logger.note('pymesh version:', __version__)
    logger.note('GMSH API:', gmsh.GMSH_API_VERSION)

    gmsh_version = 'unknown'
    try:
        gmsh_version = subprocess.check_output(["gmsh", "--version"], stderr=subprocess.STDOUT).strip().decode('utf8')
    except subprocess.CalledProcessError:
        pass

    logger.note('GMSH Version:', gmsh_version)

    config = ConfigHandler(logger)
    config.read(args['file'])

    try:
        gmsh.initialize()
        gmsh.logger.start()
        gmsh.model.add("default")

        config.set_gmsh_defaults()
        config.set_gmsh_options()

        defaultModel = Model(config)

        defaultModel.mesh()
        defaultModel.write()

        gmsh.logger.stop()
        gmsh.finalize()
    except:
        raise
    finally:
        with open(str(config.output_filename) + '.' + logger.timestamp + '.gmsh.log', 'w') as ofile:
            ofile.write("\n".join(gmsh.logger.get()))
        logger.write(config.output_filename)

if __name__ == "__main__":
    pymesh()
