#!/usr/bin/env python3

from pymesh import ConfigHandler, Logger, GenericModel, __version__
from pymesh import CopyMeshModel

import argparse
import gmsh
import subprocess


def pymesh():
    ap = argparse.ArgumentParser()
    ap.add_argument("file", help="Input file")
    args = vars(ap.parse_args())

    logger = Logger()

    logger.note('pymesh version:', __version__)
    logger.note('GMSH API:', gmsh.GMSH_API_VERSION)

    gmsh_version = 'unknown'
    try:
        gmsh_version = subprocess.check_output(["gmsh", "--version"], stderr=subprocess.STDOUT).strip().decode('utf8')
    except subprocess.CalledProcessError:
        pass

    logger.note('GMSH Version:', gmsh_version)

    config = ConfigHandler(logger)
    config.read(args['file'])

    gmsh.initialize()
    gmsh.logger.start()

    try:
        gmsh.model.add("default")
        config.set_gmsh_defaults()
        config.set_gmsh_options()

        if config.get('mesh.method') == 'generic': 
            defaultModel = GenericModel(config)
        elif config.get('mesh.method') == 'copymesh':  
            defaultModel = CopyMeshModel(config)
        else: 
            logger.die(f"Invalid mesh.method: {config.get('mesh.method')}")

        defaultModel.mesh()
        defaultModel.write()

    finally:
        ts = logger.timestamp if config.output_log_timestamp else ''
        with open(str(config.output_filename) + ts + '.gmsh.log', 'w') as ofile:
            ofile.write("\n".join(gmsh.logger.get()))
        logger.write(config.output_filename, timestamp=config.output_log_timestamp)

    gmsh.logger.stop()
    gmsh.finalize()

if __name__ == "__main__":
    pymesh()
